parameters:
  # pipelineID and runID are used to download the artifacts from a specific build pipeline
  - name: pipelineID
    type: string
  - name: runID
    type: string

  # The intended extension version to publish. 
  # This is used to verify the version in package.json matches the version to publish to avoid accidental publishing.
  - name: publishVersion
    type: string

  # Customize the environment to associate the deployment with. 
  # Useful to control which group of people should be required to approve the deployment.
  - name: environmentName
    type: string
    default: AzCodeDeploy

    # When true, skips the deployment job which actually publishes the extension
  - name: dryRun
    type: boolean
    default: false

# `resources` specifies the location of templates to pick up, use it to get 1ES templates
resources:
  repositories:
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      credscan:
        suppressionsFile: $(Build.SourcesDirectory)\.azure-pipelines\compliance\CredScanSuppressions.json
      codeql:
        enabled: false
    pool:
      name: VSEngSS-MicroBuild2022-1ES # Name of your hosted pool
      image: server2022-microbuildVS2022-1es # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows # OS of the image. Allowed values: windows, linux, macOS

    stages:
      - stage: Release
        displayName: Release extension
        jobs:
          - deployment: Publish
            displayName: Publish extension
            environment: ${{ parameters.environmentName }}
            strategy:
              runOnce:
                deploy:
                  steps:
                    - download: none
                    - checkout: none
                    - task: DownloadPipelineArtifact@2
                      displayName: Download artifacts from Build pipeline
                      inputs:
                        source: specific # download from a specific pipelines run
                        project: DevDiv
                        definition: ${{ parameters.pipelineID }}
                        buildVersionToDownload: specific
                        runId: ${{ parameters.runID }}
                        artifact: Build Root
                        targetPath: $(System.DefaultWorkingDirectory)

                    # Modify the build number to include repo name, extension version, and if dry run is true
                    - powershell: |
                        # Get the version from package.json
                        
                        $packageJsonPath = "$(Build.SourcesDirectory)/package.json"
                        $npmVersionString = (Get-Content $packageJsonPath | ConvertFrom-Json).version
                        $isDryRun = "$env:dryRun"
                        $currentBuildNumber = "$(Build.BuildId)"

                        $repoName = "$(Build.Repository.Name)"
                        $repoNameParts = $repoName -split '/'
                        $repoNameWithoutOwner = $repoNameParts[-1]
                      
                        $dry = ""
                        if ($isDryRun -eq 'True') {
                          Write-Output "Dry run was set to True. Adding 'dry' to the build number."
                          $dry = "dry"
                        }

                        $newBuildNumber = "$repoNameWithoutOwner-$npmVersionString-$dry-$currentBuildNumber"
                        Write-Output "##vso[build.updatebuildnumber]$newBuildNumber"
                      displayName: 'Prepend version from package.json to build number'
                      env:
                        dryRun: ${{ parameters.dryRun }}

                    # For safety, verify the version in package.json matches the version to publish entered by the releaser
                    # If they don't match, this step fails
                    - powershell: |
                        # Get the version from package.json
                        $packageJsonPath = "$(Build.SourcesDirectory)/package.json"
                        $npmVersionString = (Get-Content $packageJsonPath | ConvertFrom-Json).version
                        $publishVersion = "$env:publishVersion"
                        Write-Output "Publishing version: $publishVersion"
                        # Check if more than one .vsix file is found
                        if ($npmVersionString -eq $publishVersion) {
                          Write-Output "Publish version matches package.json version. Proceeding with release."
                        } else {
                          Write-Error "Publish version $publishVersion doesn't match version found in package.json $npmVersionString. Cancelling release."
                          exit 1
                        }
                      displayName: 'Verify publish version'
                      env:
                        publishVersion: ${{ parameters.publishVersion }}

                    # Find the vsix to release and set the vsix file name variable
                    # Fails with an error if more than one .vsix file is found, or if no .vsix file is found
                    - powershell: |
                        # Get all .vsix files in the current directory
                        $vsixFiles = Get-ChildItem -Path $(Build.SourcesDirectory) -Filter *.vsix -File

                        # Check if more than one .vsix file is found
                        if ($vsixFiles.Count -gt 1) {
                          Write-Error "More than one .vsix file found."
                          exit 1
                        } elseif ($vsixFiles.Count -eq 0) {
                          Write-Error "No .vsix files found."
                          exit 1
                        } else {
                          # Set the pipeline variable
                          $vsixFileName = $vsixFiles.Name
                          Write-Output "##vso[task.setvariable variable=vsixFileName;]$vsixFileName"
                          Write-Output "Found .vsix file: $vsixFileName"
                        }
                      displayName: "Find and Set .vsix File Variable"
                    - task: UseNode@1
                      inputs:
                        version: "20.x"
                      displayName: "Install Node.js"

                    - script: npm i -g @vscode/vsce
                      displayName: "Install vsce"

                    - task: AzureCLI@2
                      displayName: Run vsce publish
                      condition: and(succeeded(), ${{ eq(parameters.dryRun, false) }})
                      inputs:
                        azureSubscription: AzCodeReleases
                        scriptType: pscore
                        scriptLocation: inlineScript
                        inlineScript: |
                          vsce publish --azure-credential --packagePath $(vsixFileName) --manifestPath extension.manifest --signaturePath extension.signature.p7s