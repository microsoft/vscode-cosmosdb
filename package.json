{
    "name": "vscode-cosmosdb",
    "version": "0.22.1-alpha",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "publisher": "ms-azuretools",
    "displayName": "Azure Databases",
    "description": "Create, browse, and update globally distributed, multi-model databases in Azure.",
    "enableMongoClusters": true,
    "engines": {
        "vscode": "^1.82.0"
    },
    "galleryBanner": {
        "color": "#3c3c3c",
        "theme": "dark"
    },
    "icon": "resources/databases.png",
    "categories": [
        "Azure"
    ],
    "keywords": [
        "Cosmos DB",
        "DocumentDB",
        "Graph",
        "Gremlin",
        "MongoDB",
        "PostgreSQL"
    ],
    "preview": true,
    "homepage": "https://github.com/microsoft/vscode-cosmosdb/blob/main/README.md",
    "bugs": {
        "url": "https://github.com/microsoft/vscode-cosmosdb/issues"
    },
    "license": "SEE LICENSE IN LICENSE.md",
    "repository": {
        "type": "git",
        "url": "https://github.com/microsoft/vscode-cosmosdb"
    },
    "main": "./main",
    "activationEvents": [
        "onFileSystem:azureDatabases",
        "onView:azureWorkspace"
    ],
    "scripts": {
        "vscode:prepublish": "npm run webpack-prod",
        "build": "tsc",
        "clean": "git clean -dfx",
        "compile": "tsc -watch",
        "package": "cd dist && npm pkg delete \"scripts.vscode:prepublish\" && npx vsce package --no-dependencies",
        "lint": "eslint --quiet --ext .ts --ext .tsx .",
        "lint-fix": "eslint --ext .ts --ext .tsx . --fix",
        "pretest": "npm run webpack-prod",
        "test": "node ./out/test/runTest.js",
        "unittest": "mocha ./out/test/unit/**/*.js",
        "jesttest": "jest",
        "update-grammar": "antlr4ts -visitor ./grammar/mongo.g4 -o ./src/mongo/grammar",
        "webpack-dev": "rimraf ./dist && npm run webpack-dev-ext && npm run webpack-dev-wv",
        "webpack-prod": "rimraf ./dist && npm run webpack-prod-ext && npm run webpack-prod-wv",
        "webpack-dev-ext": "webpack --mode development --config ./webpack.config.ext.js",
        "webpack-dev-wv": "webpack --mode development --config ./webpack.config.views.js",
        "webpack-prod-ext": "webpack --mode production --config ./webpack.config.ext.js",
        "webpack-prod-wv": "webpack --mode production --config ./webpack.config.views.js",
        "watch:ext": "webpack --mode development --config ./webpack.config.ext.js --watch",
        "watch:views": "webpack serve --mode development --config ./webpack.config.views.js",
        "prepare": "husky",
        "resapi.resetall": "rimraf out node_modules dist && npm install && npm run resapi.link",
        "resapi.link": "npm link @microsoft/vscode-azureresources-api"
    },
    "devDependencies": {
        "@microsoft/vscode-azext-dev": "^2.0.4",
        "@pmmmwh/react-refresh-webpack-plugin": "^0.5.15",
        "@swc/cli": "^0.4.0",
        "@swc/core": "^1.7.26",
        "@swc/jest": "^0.2.36",
        "@types/documentdb": "^1.10.13",
        "@types/fs-extra": "^11.0.4",
        "@types/gulp": "^4.0.17",
        "@types/jest": "^29.5.12",
        "@types/lodash.omit": "^4.5.9",
        "@types/lodash.debounce": "^4.0.9",
        "@types/mocha": "^10.0.6",
        "@types/node": "^18.19.50",
        "@types/pg": "^8.11.9",
        "@types/react": "^18.3.5",
        "@types/react-dom": "^18.3.0",
        "@types/uuid": "^10.0.0",
        "@types/vscode": "1.82.0",
        "@types/vscode-webview": "^1.57.5",
        "@typescript-eslint/eslint-plugin": "^8.5.0",
        "@typescript-eslint/parser": "^8.5.0",
        "@vscode/test-electron": "^2.4.1",
        "@vscode/vsce": "~2.32.0",
        "antlr4ts-cli": "^0.5.0-alpha.4",
        "copy-webpack-plugin": "^12.0.2",
        "css-loader": "^7.1.2",
        "eslint": "^8.57.0",
        "eslint-plugin-import": "^2.30.0",
        "glob": "^7.2.3",
        "husky": "^9.1.5",
        "jest": "^29.7.0",
        "mocha": "^10.7.3",
        "mocha-junit-reporter": "^2.2.1",
        "mocha-multi-reporters": "^1.5.1",
        "monaco-editor-webpack-plugin": "^7.1.0",
        "prettier": "^3.3.3",
        "prettier-plugin-organize-imports": "^4.0.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-refresh": "^0.14.2",
        "rimraf": "^5.0.10",
        "sass": "^1.78.0",
        "sass-loader": "^16.0.1",
        "style-loader": "^4.0.0",
        "swc-loader": "^0.2.6",
        "ts-jest": "^29.2.5",
        "ts-node": "^10.9.2",
        "typescript": "^5.6.2",
        "webpack": "^5.94.0",
        "webpack-bundle-analyzer": "^4.10.2",
        "webpack-cli": "^5.1.4",
        "webpack-dev-server": "^5.1.0"
    },
    "dependencies": {
        "@azure/arm-cosmosdb": "16.0.0-beta.7",
        "@azure/arm-postgresql": "^6.1.0",
        "@azure/arm-postgresql-flexible": "^7.1.0",
        "@azure/cosmos": "^4.1.1",
        "@fluentui/react-components": "^9.54.14",
        "@fluentui/react-icons": "^2.0.258",
        "@microsoft/vscode-azext-azureauth": "^2.5.0",
        "@microsoft/vscode-azext-azureutils": "^3.1.1",
        "@microsoft/vscode-azext-utils": "^2.5.7",
        "@microsoft/vscode-azureresources-api": "2.3.2",
        "@monaco-editor/react": "^4.6.0",
        "allotment": "^1.20.2",
        "antlr4ts": "^0.4.1-alpha.0",
        "bson": "^6.8.0",
        "fs-extra": "^8.0.0",
        "lodash.omit": "^4.5.0",
        "lodash.debounce": "^4.0.8",
        "monaco-editor": "^0.51.0",
        "mongodb": "^6.8.1",
        "pg": "^8.12.0",
        "pg-connection-string": "^2.6.4",
        "pg-structure": "^7.15.3",
        "semver": "^7.6.3",
        "slickgrid-react": "^5.7.0",
        "uuid": "^10.0.0",
        "vscode-json-languageservice": "^5.4.1",
        "vscode-languageclient": "^6.1.4",
        "vscode-languageserver": "^6.1.1",
        "vscode-languageserver-textdocument": "^1.0.12",
        "vscode-nls": "^4.0.0",
        "vscode-uri": "^3.0.8"
    },
    "extensionDependencies": [
        "ms-azuretools.vscode-azureresourcegroups"
    ],
    "overrides": {
        "es5-ext": "0.10.53"
    },
    "contributes": {
        "x-azResources": {
            "azure": {
                "branches": [
                    {
                        "type": "AzureCosmosDb"
                    },
                    {
                        "type": "PostgresqlServersStandard"
                    },
                    {
                        "type": "PostgresqlServersFlexible"
                    },
                    {
                        "type": "MongoClusters"
                    }
                ]
            },
            "workspace": {
                "branches": [
                    {
                        "type": "ms-azuretools.vscode-cosmosdb"
                    }
                ],
                "resources": true
            },
            "commands": [
                {
                    "command": "azureDatabases.createServer",
                    "title": "Create Database Server...",
                    "type": "microsoft.documentdb/databaseaccounts",
                    "detail": "SQL or NoSQL databases for your web apps."
                }
            ],
            "activation": {
                "onResolve": [
                    "microsoft.documentdb/databaseaccounts",
                    "microsoft.dbforpostgresql/servers",
                    "microsoft.dbforpostgresql/flexibleservers",
                    "microsoft.documentdb/mongoclusters"
                ]
            }
        },
        "languages": [
            {
                "id": "mongo",
                "aliases": [
                    "Mongo Scrapbook",
                    "mongo"
                ],
                "extensions": [
                    ".mongo"
                ],
                "firstLine": "^#!/.*\\bmongo*\\b",
                "configuration": "./grammar/configuration.json"
            },
            {
                "id": "postgres",
                "aliases": [
                    "PostgreSQL"
                ],
                "extensions": [
                    ".psql"
                ]
            },
            {
                "id": "nosql",
                "aliases": [
                    "Cosmos NoSQL",
                    "nosql"
                ],
                "extensions": [
                    ".nosql"
                ]
            }
        ],
        "grammars": [
            {
                "language": "mongo",
                "scopeName": "source.mongo.js",
                "path": "./grammar/JavaScript.tmLanguage.json"
            },
            {
                "scopeName": "source.mongo.js.regexp",
                "path": "./grammar/Regular Expressions (JavaScript).tmLanguage"
            }
        ],
        "commands": [
            {
                "category": "Azure Databases",
                "command": "azureDatabases.createServer",
                "title": "Create Server...",
                "icon": "$(add)"
            },
            {
                "category": "Cosmos DB",
                "command": "azureDatabases.detachDatabaseAccount",
                "title": "Detach"
            },
            {
                "category": "Azure Databases",
                "command": "azureDatabases.loadMore",
                "title": "Load More"
            },
            {
                "category": "Azure Databases",
                "command": "azureDatabases.refresh",
                "title": "Refresh",
                "icon": "$(refresh)"
            },
            {
                "category": "Azure Databases",
                "command": "azureDatabases.reportIssue",
                "title": "Report Issue..."
            },
            {
                "category": "Azure Databases",
                "command": "azureDatabases.update",
                "title": "Update to Cloud",
                "icon": "$(cloud-upload)"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.attachDatabaseAccount",
                "title": "Attach Database Account...",
                "icon": "$(plug)"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.attachEmulator",
                "title": "Attach Emulator..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.connectMongoDB",
                "title": "Connect to Database..."
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.connectNoSqlContainer",
                "title": "Connect to NoSQL container",
                "when": "false"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.copyConnectionString",
                "title": "Copy Connection String"
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.createDocDBCollection",
                "title": "Create Collection..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.createDocDBDatabase",
                "title": "Create Database..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.createDocDBDocument",
                "title": "Create Document..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.createDocDBStoredProcedure",
                "title": "Create Stored Procedure..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.createDocDBTrigger",
                "title": "Create Trigger..."
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.createGraph",
                "title": "Create Graph..."
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.createGraphDatabase",
                "title": "Create Database..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.createMongoCollection",
                "title": "Create Collection..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.createMongoDatabase",
                "title": "Create Database..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.createMongoDocument",
                "title": "Create Document"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.deleteAccount",
                "title": "Delete Account..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.deleteDocDBCollection",
                "title": "Delete Collection..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.deleteDocDBDatabase",
                "title": "Delete Database..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.deleteDocDBDocument",
                "title": "Delete Document..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.deleteDocDBStoredProcedure",
                "title": "Delete Stored Procedure..."
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.deleteDocDBTrigger",
                "title": "Delete Trigger..."
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.deleteGraph",
                "title": "Delete Graph..."
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.deleteGraphDatabase",
                "title": "Delete Database..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.deleteMongoCollection",
                "title": "Delete Collection..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.deleteMongoDB",
                "title": "Delete Database..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.deleteMongoDocument",
                "title": "Delete Document..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.executeAllMongoCommands",
                "title": "Execute All MongoDB Commands"
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.executeDocDBStoredProcedure",
                "title": "Execute Stored Procedure..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.executeMongoCommand",
                "title": "Execute MongoDB Command"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.executeNoSqlQuery",
                "title": "Execute NoSQL Query",
                "when": "false"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.getNoSqlQueryPlan",
                "title": "Get NoSQL Query Plan",
                "when": "false"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.importDocument",
                "title": "Import Document into a Collection..."
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.launchMongoShell",
                "title": "Launch Shell"
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.newMongoScrapbook",
                "title": "New Mongo Scrapbook",
                "icon": "$(new-file)"
            },
            {
                "category": "MongoDB",
                "command": "cosmosDB.openCollection",
                "title": "Open Collection"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.openDocument",
                "title": "Open Document"
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.openGraphExplorer",
                "title": "Open Graph Explorer"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.openNoSqlQueryEditor",
                "title": "Open NoSQL Query Editor"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.openStoredProcedure",
                "title": "Open Stored Procedure"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.openTrigger",
                "title": "Open Trigger"
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.viewDocDBCollectionOffer",
                "title": "View Collection Offer"
            },
            {
                "category": "Core (SQL)",
                "command": "cosmosDB.writeNoSqlQuery",
                "title": "Create New NoSQL Query"
            },
            {
                "category": "mongoClusters",
                "command": "mongoClusters.cmd.hello",
                "title": "Say Hello!"
            },
            {
                "category": "mongoClusters",
                "command": "mongoClusters.cmd.webview",
                "title": "Show WebView"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.configureFirewall",
                "title": "Configure Firewall"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.connectDatabase",
                "title": "Connect to Database..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.copyConnectionString",
                "title": "Copy Connection String"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.createDatabase",
                "title": "Create Database..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.createFunctionQuery",
                "title": "Create Function Query..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.createStoredProcedureQuery",
                "title": "Create Stored Procedure Query..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteDatabase",
                "title": "Delete Database..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteFunction",
                "title": "Delete Function..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteServer",
                "title": "Delete Server..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteStoredProcedure",
                "title": "Delete Stored Procedure..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteTable",
                "title": "Delete Table..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.enterCredentials",
                "title": "Enter Server Credentials"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.executeQuery",
                "title": "Execute Query..."
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.openFunction",
                "title": "Open Function"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.openStoredProcedure",
                "title": "Open Stored Procedure"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.showPasswordlessWiki",
                "title": "Learn more about authenticating with Azure Active Directory",
                "icon": "$(warning)"
            }
        ],
        "submenus": [
            {
                "id": "azureDatabases.submenus.workspaceActions",
                "label": "Azure Databases",
                "icon": {
                    "dark": "resources/databases.png",
                    "light": "resources/databases.png"
                }
            }
        ],
        "menus": {
            "azureDatabases.submenus.workspaceActions": [
                {
                    "command": "cosmosDB.attachDatabaseAccount",
                    "group": "1_attach@1"
                }
            ],
            "view/title": [
                {
                    "submenu": "azureDatabases.submenus.workspaceActions",
                    "when": "view == azureWorkspace",
                    "group": "navigation@6"
                }
            ],
            "editor/context": [
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename==cosmos-result.json"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-document[.]json)/"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-collection[.]json)/"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-stored-procedure[.]js)/"
                },
                {
                    "command": "cosmosDB.executeAllMongoCommands",
                    "when": "resourceLangId==mongo"
                },
                {
                    "command": "cosmosDB.executeMongoCommand",
                    "when": "resourceLangId==mongo"
                },
                {
                    "command": "cosmosDB.importDocument",
                    "when": "resourceLangId==json"
                },
                {
                    "command": "postgreSQL.connectDatabase",
                    "when": "resourceLangId==postgres"
                }
            ],
            "editor/title": [
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename==cosmos-result.json",
                    "group": "navigation"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-document[.]json)(?![a-z])/i",
                    "group": "navigation"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-collection[.]json)(?![a-z])/i",
                    "group": "navigation"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-stored-procedure[.]js)(?![a-z])/i",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "azureDatabases.createServer",
                    "when": "view == azureResourceGroups && viewItem =~ /(AzureCosmosDb|PostgreSqlServers(Standard|Flexible))/i && viewItem =~ /azureResourceTypeGroup/i",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.deleteAccount",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBMongoServer(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteAccount",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteAccount",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteAccount",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBTableAccount(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "command": "postgreSQL.deleteServer",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /postgresServer(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.createMongoDatabase",
                    "when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createMongoDatabase",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBMongoServer(?![a-z])/i",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createMongoDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createMongoCollection",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createDocDBDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentsGroup",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.writeNoSqlQuery",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.createDocDBStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProceduresGroup",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createDocDBTrigger",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBTriggersGroup",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createDocDBCollection",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentDatabase",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createDocDBDatabase",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createDocDBDatabase",
                    "when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createGraphDatabase",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createGraphDatabase",
                    "when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.createGraph",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraphDatabase",
                    "group": "1@1"
                },
                {
                    "command": "postgreSQL.showPasswordlessWiki",
                    "when": "view =~ /azure(ResourceGroups|azureFocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i && viewItem =~ /usesPassword/i",
                    "group": "inline"
                },
                {
                    "command": "postgreSQL.createDatabase",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /postgresServer(?![a-z])/i",
                    "group": "1@1"
                },
                {
                    "command": "postgreSQL.createDatabase",
                    "when": "view == azureWorkspace && viewItem == postgresServerAttached",
                    "group": "1@1"
                },
                {
                    "command": "azureDatabases.detachDatabaseAccount",
                    "when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached",
                    "group": "1@2"
                },
                {
                    "command": "azureDatabases.detachDatabaseAccount",
                    "when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached",
                    "group": "1@2"
                },
                {
                    "command": "azureDatabases.detachDatabaseAccount",
                    "when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached",
                    "group": "1@2"
                },
                {
                    "command": "azureDatabases.detachDatabaseAccount",
                    "when": "view == azureWorkspace && viewItem == cosmosDBTableAccountAttached",
                    "group": "1@2"
                },
                {
                    "command": "azureDatabases.detachDatabaseAccount",
                    "when": "view == azureWorkspace && viewItem == postgresServerAttached",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.connectMongoDB",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.deleteMongoDB",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteMongoCollection",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection",
                    "group": "1@4"
                },
                {
                    "command": "cosmosDB.deleteMongoDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoDocument",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteDocDBCollection",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.viewDocDBCollectionOffer",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection",
                    "group": "1@3"
                },
                {
                    "command": "cosmosDB.deleteDocDBDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocument",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteDocDBStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProcedure",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.executeDocDBStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProcedure",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.deleteDocDBTrigger",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBTrigger",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteDocDBDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentDatabase",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteGraphDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraphDatabase",
                    "group": "1@2"
                },
                {
                    "command": "postgreSQL.deleteDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "command": "postgreSQL.deleteTable",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresTable",
                    "group": "1@2"
                },
                {
                    "command": "postgreSQL.deleteFunction",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunction",
                    "group": "1@2"
                },
                {
                    "command": "postgreSQL.deleteStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedure",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.deleteGraph",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraph",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.attachDatabaseAccount",
                    "when": "view == azureWorkspace && viewItem =~ /cosmosDBAttachedAccounts(?![a-z])/gi",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.attachEmulator",
                    "when": "view == azureWorkspace && viewItem == cosmosDBAttachedAccountsWithEmulator",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.openCollection",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection",
                    "group": "1@2"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBMongoServer(?![a-z])/i",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBTableAccount(?![a-z])/i",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view == azureWorkspace && viewItem == cosmosDBTableAccountAttached",
                    "group": "2@1"
                },
                {
                    "command": "postgreSQL.copyConnectionString",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached",
                    "group": "3@2"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentDatabase",
                    "group": "4@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentsGroup",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProceduresGroup",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBTriggersGroup",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azureWorkspace/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i",
                    "group": "3@2"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azureWorkspace/ && viewItem =~ /postgresServer(?![a-z])/i",
                    "group": "2@2"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "3@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresTables",
                    "group": "1@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunctions",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedures",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached",
                    "group": "3@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azureWorkspace/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i",
                    "group": "3@2"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached",
                    "group": "3@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraphDatabase",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view == azureWorkspace && viewItem == postgresServerAttached",
                    "group": "2@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb",
                    "group": "3@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection",
                    "group": "4@1"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "view == azureWorkspace && viewItem =~ /^cosmosDBAttachedAccounts(?![a-z])/gi",
                    "group": "2@1"
                },
                {
                    "command": "cosmosDB.importDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection",
                    "group": "1@3"
                },
                {
                    "command": "cosmosDB.importDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection",
                    "group": "1@1"
                },
                {
                    "command": "postgreSQL.connectDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "1@1"
                },
                {
                    "command": "postgreSQL.createFunctionQuery",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunctions",
                    "group": "1@1"
                },
                {
                    "command": "postgreSQL.createStoredProcedureQuery",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedures",
                    "group": "1@1"
                },
                {
                    "command": "cosmosDB.openNoSqlQueryEditor",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection",
                    "group": "1@2"
                }
            ],
            "explorer/context": [
                {
                    "command": "cosmosDB.importDocument",
                    "when": "resourceLangId == json"
                },
                {
                    "command": "postgreSQL.connectDatabase",
                    "when": "resourceLangId == postgres"
                }
            ],
            "commandPalette": [
                {
                    "command": "azureDatabases.loadMore",
                    "when": "never"
                },
                {
                    "command": "azureDatabases.refresh",
                    "when": "never"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "never"
                },
                {
                    "command": "cosmosDB.executeAllMongoCommands",
                    "when": "editorLangId == 'mongo'"
                },
                {
                    "command": "cosmosDB.executeMongoCommand",
                    "when": "editorLangId == 'mongo'"
                },
                {
                    "command": "cosmosDB.executeNoSqlQuery",
                    "when": "editorLangId == 'nosql'"
                },
                {
                    "command": "cosmosDB.getNoSqlQueryPlan",
                    "when": "editorLangId == 'nosql'"
                },
                {
                    "command": "postgreSQL.executeQuery",
                    "when": "editorLangId == 'postgres'"
                }
            ]
        },
        "keybindings": [
            {
                "command": "cosmosDB.executeMongoCommand",
                "key": "ctrl+shift+'",
                "mac": "cmd+shift+'",
                "when": "editorLangId == 'mongo' && editorTextFocus"
            },
            {
                "command": "cosmosDB.executeAllMongoCommands",
                "key": "ctrl+shift+;",
                "mac": "cmd+shift+;",
                "when": "editorLangId == 'mongo' && editorTextFocus"
            }
        ],
        "configuration": {
            "title": "Azure Databases",
            "properties": {
                "mongo.shell.path": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "Full path to folder and executable to start the Mongo shell, needed by some Mongo scrapbook commands. The default is to search in the system path for 'mongo'.",
                    "default": null
                },
                "mongo.shell.args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to pass when starting the Mongo shell.",
                    "default": [
                        "--quiet"
                    ]
                },
                "mongo.shell.timeout": {
                    "type": "number",
                    "description": "The duration allowed (in seconds) for the Mongo shell to execute a command. Default value is 30 seconds.",
                    "default": 30
                },
                "azureDatabases.showExplorer": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show or hide the Azure Databases Explorer"
                },
                "cosmosDB.documentLabelFields": {
                    "type": "array",
                    "default": [
                        "name",
                        "Name",
                        "NAME",
                        "ID",
                        "UUID",
                        "Id",
                        "id",
                        "_id",
                        "uuid"
                    ],
                    "description": "The field values to display as labels in the treeview for Cosmos DB and MongoDB documents, in priority order"
                },
                "cosmosDB.enableEndpointDiscovery": {
                    "type": "boolean",
                    "default": true,
                    "description": "Flag to enable/disable automatic redirecting of requests based on read/write operations."
                },
                "cosmosDB.showSavePrompt": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show warning dialog when uploading a document to the cloud."
                },
                "azureDatabases.batchSize": {
                    "type": "number",
                    "description": "The batch size to be used when querying Azure Database resources.",
                    "default": 50
                },
                "cosmosDB.emulator.mongoPort": {
                    "type": "integer",
                    "default": 10255,
                    "description": "Port to use when connecting to a CosmosDB Mongo Emulator instance"
                },
                "cosmosDB.emulator.port": {
                    "type": "integer",
                    "default": 8081,
                    "description": "Port to use when connecting to a CosmosDB Emulator instance"
                },
                "azureDatabases.useCosmosOAuth": {
                    "type": "boolean",
                    "description": "Whether to use OAuth credential for Cosmos DB NoSQL resources",
                    "default": false
                }
            }
        }
    }
}
