parameters:
    # The intended extension version to publish.
    # This is used to verify the version in package.json matches the version to publish to avoid accidental publishing.
    - name: publishVersion
      type: string

    # Customize the environment to associate the deployment with.
    # Useful to control which group of people should be required to approve the deployment.
    - name: environmentName
      type: string
      default: AzCodeDeploy

    # When true, skips the deployment job which actually publishes the extension
    - name: dryRun
      type: boolean
      default: true

    - name: 'debug'
      displayName: 'Enable debug output'
      type: boolean
      default: false

resources:
    repositories:
        - repository: templates
          type: git
          name: OneBranch.Pipelines/GovernedTemplates
          ref: refs/heads/main
    pipelines:
        - pipeline: build # Alias for your build pipeline source
          project: 'CosmosDB'
          source: \VSCode Extensions\vscode-cosmosdb # name of the pipeline that produces the artifacts

variables:
    system.debug: ${{ parameters.debug }}
    # Required by MicroBuild template
    TeamName: 'Desktop Tools'
    WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2022/vse2022:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

extends:
    template: v2/OneBranch.Official.CrossPlat.yml@templates


    parameters:

        # remove for release pipeline?
        cloudvault: # https://aka.ms/obpipelines/cloudvault
            enabled: false
        globalSdl: # https://aka.ms/obpipelines/sdl
            asyncSdl:
                enabled: false
            tsa:
                enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into'break' build mode.
                #configFile: '$(Build.SourcesDirectory)/.azure-pipelines/compliance/tsaoptions.json'
            credscan:
                suppressionsFile: $(Build.SourcesDirectory)/.azure-pipelines/compliance/CredScanSuppressions.json
            policheck:
                break: true # always break the build on policheck issues. You can disable it by setting to 'false'
            suppression:
                suppressionFile: $(Build.SourcesDirectory)/.config/guardian/.gdnsuppress
            codeql:
                excludePathPatterns: '**/.vscode-test, dist' # Exclude .vscode-test and dist directories from CodeQL alerting
                compiled:
                    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
                        enabled: true
                    ${{ else }}:
                        enabled: false
                tsaEnabled: false # See 'Codeql.TSAEnabled' in the Addition Options section below
            componentgovernance:
                ignoreDirectories: $(Build.SourcesDirectory)/.vscode-test
        featureFlags:
            linuxEsrpSigning: true
            WindowsHostVersion:
                Version: 2022
        # end of remove for release pipeline

        release:
            category: NonAzure # NonAzure category is used to indicate that this is not an Azure service

        stages:
            - stage: ValidateServiceConnection
              displayName: Validate Service Connection
              jobs:
                  - job: ValidateServiceConnection
                    displayName: "\U00002713 Validate Service Connection"
                    pool:
                        type: windows
                    variables:
                        ob_outputDirectory: '$(Build.ArtifactStagingDirectory)' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
                    steps:
                        # Get the user ID of the Azure DevOps Service Connection user to use for publishing
                        - task: AzureCLI@2
                          displayName: 'Get AzDO User ID'
                          inputs:
                              azureSubscription: 'CosmosDB VSCode Publishing'
                              scriptType: pscore
                              scriptLocation: inlineScript
                              inlineScript: |
                                  az rest -u https://app.vssps.visualstudio.com/_apis/profile/profiles/me --resource 499b84ac-1321-427f-aa17-267ca6975798
            - stage: Release
              displayName: Release extension
              variables:
                  - name: ob_release_environment
                    value: Production # should be  Test, PPE or Production
              jobs:
                  - job: ReleaseValidation
                    displayName: "\U00002713 Validate Artifacts"
                    templateContext:
                        inputs:
                            - input: pipelineArtifact
                              pipeline: build
                              targetPath: $(System.DefaultWorkingDirectory)
                              artifactName: drop_BuildStage_Main
                    pool:
                        type: release
                    variables:
                        ob_outputDirectory: '$(Build.ArtifactStagingDirectory)' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
                    steps:
                        # Modify the build number to include repo name, extension version, and if dry run is true
                        - task: PowerShell@2
                          inputs:
                              targetType: 'inline'
                              script: |
                                  # Get the version from package.json

                                  $packageJsonPath = "$(System.DefaultWorkingDirectory)/package.json"
                                  $npmVersionString = (Get-Content $packageJsonPath | ConvertFrom-Json).version
                                  $isDryRun = "$env:dryRun"
                                  $currentBuildNumber = "$(Build.BuildId)"

                                  $repoName = "$(Build.Repository.Name)"
                                  $repoNameParts = $repoName -split '/'
                                  $repoNameWithoutOwner = $repoNameParts[-1]

                                  $dry = ""
                                  if ($isDryRun -eq 'True') {
                                    Write-Output "Dry run was set to True. Adding 'dry' to the build number."
                                    $dry = "dry"
                                  }

                                  $newBuildNumber = "$repoNameWithoutOwner-$npmVersionString-$dry-$currentBuildNumber"
                                  Write-Output "##vso[build.updatebuildnumber]$newBuildNumber"
                          displayName: "\U0001F449 Prepend version from package.json to build number"
                          env:
                              dryRun: ${{ parameters.dryRun }}

                        # For safety, verify the version in package.json matches the version to publish entered by the releaser
                        # If they don't match, this step fails
                        - task: PowerShell@2
                          inputs:
                              targetType: 'inline'
                              script: |
                                  # Get the version from package.json
                                  $packageJsonPath = "$(System.DefaultWorkingDirectory)/package.json"
                                  $npmVersionString = (Get-Content $packageJsonPath | ConvertFrom-Json).version
                                  $publishVersion = "$env:publishVersion"
                                  Write-Output "Publishing version: $publishVersion"
                                  # Check if more than one .vsix file is found
                                  if ($npmVersionString -eq $publishVersion) {
                                    Write-Output "Publish version matches package.json version. Proceeding with release."
                                  } else {
                                    Write-Error "Publish version $publishVersion doesn't match version found in package.json $npmVersionString. Cancelling release."
                                    exit 1
                                  }
                          displayName: "\U0001F449 Verify publish version"
                          env:
                              publishVersion: ${{ parameters.publishVersion }}

                        # Find the vsix to release and set the vsix file name variable
                        # Fails with an error if more than one .vsix file is found, or if no .vsix file is found
                        - task: PowerShell@2
                          inputs:
                              targetType: 'inline'
                              script: |
                                  # Get all .vsix files in the current directory
                                  Get-ChildItem -Path $(System.DefaultWorkingDirectory) -File
                                  $vsixFiles = Get-ChildItem -Path $(System.DefaultWorkingDirectory) -Filter *.vsix -File

                                  # Check if more than one .vsix file is found
                                  if ($vsixFiles.Count -gt 1) {
                                    Write-Error "More than one .vsix file found."
                                    exit 1
                                  } elseif ($vsixFiles.Count -eq 0) {
                                    Write-Error "No .vsix files found."
                                    exit 1
                                  } else {
                                    # Set the pipeline variable
                                    $vsixFileName = $vsixFiles.Name
                                    Write-Output "##vso[task.setvariable variable=vsixFileName;isOutput=true]$vsixFileName"
                                    Write-Output "Found .vsix file: $vsixFileName"
                                  }
                          displayName: "\U0001F449 Find and Set .vsix File Variable"
                          name: setVsixFileNameStep

                  - job: ReleaseExtension
                    displayName: "\U00002713 Release Extension"
                    dependsOn: ReleaseValidation
                    templateContext:
                        inputs:
                            - input: pipelineArtifact
                              pipeline: build
                              targetPath: $(System.DefaultWorkingDirectory)
                              artifactName: drop_BuildStage_Main
                    pool:
                        type: release
                    variables:
                        ob_outputDirectory: '$(Build.ArtifactStagingDirectory)' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
                        vsixFileName: $[ dependencies.ReleaseValidation.outputs['setVsixFileNameStep.vsixFileName'] ]
                    steps:
                        - task: PowerShell@2
                          displayName: "\U0001F449 Verify .vsix File Variable"
                          inputs:
                              targetType: 'inline'
                              script: |
                                  if (-not $env:vsixFileName) {
                                    Write-Error "vsixFileName variable not defined. Cannot proceed with release."
                                    exit 1
                                  }
                                  if (Test-Path -Path $(System.DefaultWorkingDirectory)/$env:vsixFileName) {
                                    Write-Output "Found .vsix file: $env:vsixFileName"
                                  } else {
                                    Write-Error "The specified $env:vsixFileName file does not exist in the current directory."
                                    exit 1
                                  }

                        - task: UseNode@1
                          inputs:
                              version: '20.x'
                          displayName: "\U0001F449 Install Node.js"

                        - script: npm i -g @vscode/vsce
                          displayName: "\U0001F449 Install vsce"

                        - task: AzureCLI@2
                          displayName: "\U0001F449 Run vsce publish"
                          condition: and(succeeded(), ${{ eq(parameters.dryRun, false) }})
                          inputs:
                              azureSubscription: "CosmosDB VSCode Publishing"
                              scriptType: pscore
                              scriptLocation: inlineScript
                              inlineScript: |
                                  vsce publish --azure-credential --packagePath $(vsixFileName) --manifestPath build.manifest --pre-release
                                  # vsce publish --azure-credential --packagePath $(vsixFileName) --manifestPath extension.manifest --signaturePath extension.signature.p7s
