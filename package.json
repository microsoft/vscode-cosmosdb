{
    "name": "vscode-cosmosdb",
    "version": "0.25.2-alpha",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "publisher": "ms-azuretools",
    "displayName": "Azure Databases",
    "description": "Connect to MongoDB, Mongo Clusters, CosmosDB and other databases in and outside of Azure, inspect and edit your data and run powerful queries with the visual query editor.",
    "enableMongoClusters": true,
    "engines": {
        "vscode": "^1.90.0",
        "node": ">=20.0.0"
    },
    "galleryBanner": {
        "color": "#3c3c3c",
        "theme": "dark"
    },
    "icon": "resources/databases.png",
    "categories": [
        "Azure",
        "Data Science"
    ],
    "keywords": [
        "Cosmos DB",
        "DocumentDB",
        "MongoDB",
        "PostgreSQL",
        "Database"
    ],
    "preview": true,
    "homepage": "https://github.com/microsoft/vscode-cosmosdb/blob/main/README.md",
    "bugs": {
        "url": "https://github.com/microsoft/vscode-cosmosdb/issues"
    },
    "license": "SEE LICENSE IN LICENSE.md",
    "repository": {
        "type": "git",
        "url": "https://github.com/microsoft/vscode-cosmosdb"
    },
    "main": "./main",
    "l10n": "./l10n",
    "activationEvents": [
        "onFileSystem:azureDatabases",
        "onView:azureWorkspace"
    ],
    "scripts": {
        "build": "tsc",
        "clean": "git clean -dfx",
        "compile": "tsc -watch",
        "package": "run-script-os",
        "package:win32": "npm run webpack-prod && cd dist && npm pkg delete \"scripts.vscode:prepublish\" && npx vsce package --no-dependencies --out ../%npm_package_name%-%npm_package_version%.vsix",
        "package:default": "npm run webpack-prod && cd dist && npm pkg delete \"scripts.vscode:prepublish\" && npx vsce package --no-dependencies --out ../${npm_package_name}-${npm_package_version}.vsix",
        "lint": "eslint --quiet --ext .ts --ext .tsx .",
        "lint-fix": "eslint --ext .ts --ext .tsx . --fix",
        "prettier": "prettier -c \"src/**/*.@(js|ts|jsx|tsx)\" \"test/**/*.@(js|ts|jsx|tsx)\"",
        "prettier-fix": "prettier -w \"src/**/*.@(js|ts|jsx|tsx)\" \"test/**/*.@(js|ts|jsx|tsx)\"",
        "pretest": "npm run build",
        "test": "vscode-test",
        "jesttest": "jest",
        "update-grammar": "antlr4ts -visitor ./grammar/mongo.g4 -o ./src/mongo/grammar",
        "webpack-dev": "rimraf ./dist && npm run webpack-dev-ext && npm run webpack-dev-wv",
        "webpack-prod": "rimraf ./dist && npm run webpack-prod-ext && npm run webpack-prod-wv",
        "webpack-dev-ext": "webpack --mode development --config ./webpack.config.ext.js",
        "webpack-dev-wv": "webpack --mode development --config ./webpack.config.views.js",
        "webpack-prod-ext": "webpack --mode production --config ./webpack.config.ext.js",
        "webpack-prod-wv": "webpack --mode production --config ./webpack.config.views.js",
        "watch:ext": "webpack --mode development --config ./webpack.config.ext.js --watch",
        "watch:views": "webpack serve --mode development --config ./webpack.config.views.js",
        "resapi.resetall": "rimraf out node_modules dist && npm install && npm run resapi.link",
        "resapi.link": "npm link @microsoft/vscode-azureresources-api",
        "l10n": "npx @vscode/l10n-dev export --outDir ./l10n ./src",
        "l10n:auto": "cross-env AZURE_TRANSLATOR_KEY= cross-env AZURE_TRANSLATOR_REGION= npx @vscode/l10n-dev generate-azure --outDir ./l10n ./l10n/bundle.l10n.json ./package.nls.json",
        "l10n:export": "npx @vscode/l10n-dev generate-xlf ./l10n/bundle.l10n.json --outFile vscode-cosmosdb.xlf",
        "l10n:import": "npx @vscode/l10n-dev import-xlf ./translations.xlf"
    },
    "devDependencies": {
        "@microsoft/vscode-azext-dev": "^2.1.0",
        "@pmmmwh/react-refresh-webpack-plugin": "^0.5.15",
        "@swc/cli": "^0.6.0",
        "@swc/core": "^1.11.7",
        "@swc/jest": "^0.2.37",
        "@types/documentdb": "^1.10.13",
        "@types/fs-extra": "^11.0.4",
        "@types/jest": "^29.5.14",
        "@types/lodash.debounce": "^4.0.9",
        "@types/lodash.omit": "^4.5.9",
        "@types/mocha": "^10.0.10",
        "@types/node": "~20.9.5",
        "@types/pg": "^8.11.11",
        "@types/react": "^18.3.18",
        "@types/react-dom": "^18.3.5",
        "@types/semver": "^7.3.12",
        "@types/uuid": "^10.0.0",
        "@types/vscode": "1.90.0",
        "@types/vscode-webview": "^1.57.5",
        "@typescript-eslint/eslint-plugin": "^8.26.0",
        "@typescript-eslint/parser": "^8.26.0",
        "@vscode/test-cli": "^0.0.10",
        "@vscode/test-electron": "^2.4.1",
        "@vscode/vsce": "^3.2.2",
        "@vscode/l10n-dev": "^0.0.35",
        "antlr4ts-cli": "^0.5.0-alpha.4",
        "copy-webpack-plugin": "^13.0.0",
        "cross-env": "^7.0.3",
        "css-loader": "^7.1.2",
        "eslint": "^8.57.1",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-jest": "^28.11.0",
        "eslint-plugin-license-header": "^0.8.0",
        "eslint-plugin-mocha": "^10.5.0",
        "glob": "^11.0.1",
        "jest": "^29.7.0",
        "jest-mock-vscode": "~3.0.5",
        "mocha": "^11.1.0",
        "mocha-junit-reporter": "^2.2.1",
        "mocha-multi-reporters": "^1.5.1",
        "monaco-editor-webpack-plugin": "^7.1.0",
        "prettier": "^3.5.3",
        "prettier-plugin-organize-imports": "^4.1.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-refresh": "^0.16.0",
        "rimraf": "^6.0.1",
        "run-script-os": "^1.1.6",
        "sass": "~1.79.6",
        "sass-loader": "^16.0.5",
        "style-loader": "^4.0.0",
        "swc-loader": "^0.2.6",
        "terser-webpack-plugin": "^5.3.13",
        "ts-jest": "^29.2.6",
        "ts-node": "^10.9.2",
        "typescript": "^5.8.2",
        "webpack": "^5.98.0",
        "webpack-bundle-analyzer": "^4.10.2",
        "webpack-cli": "^6.0.1",
        "webpack-dev-server": "^5.2.0"
    },
    "dependencies": {
        "@azure/arm-cosmosdb": "16.0.0-beta.7",
        "@azure/arm-postgresql": "^6.1.0",
        "@azure/arm-postgresql-flexible": "^8.0.0",
        "@azure/arm-resources": "^6.0.0",
        "@azure/cosmos": "^4.2.0",
        "@fluentui/react-components": "^9.60.0",
        "@fluentui/react-icons": "^2.0.279",
        "@microsoft/vscode-azext-azureauth": "^4.1.1",
        "@microsoft/vscode-azext-azureutils": "^3.1.4",
        "@microsoft/vscode-azext-utils": "^2.6.0",
        "@microsoft/vscode-azureresources-api": "^2.4.0",
        "@monaco-editor/react": "^4.7.0",
        "@prantlf/jsonlint": "^16.0.0",
        "@tanstack/react-query": "^5.67.1",
        "@trpc/client": "11.0.0-rc.781",
        "@trpc/server": "11.0.0-rc.781",
        "@vscode/l10n": "^0.0.18",
        "allotment": "^1.20.3",
        "antlr4ts": "^0.5.0-alpha.4",
        "bson": "^6.10.3",
        "denque": "^2.1.0",
        "fs-extra": "^11.3.0",
        "lodash.debounce": "^4.0.8",
        "lodash.isequal": "^4.5.0",
        "lodash.merge": "^4.6.2",
        "lodash.omit": "^4.5.0",
        "monaco-editor": "~0.51.0",
        "mongodb": "^6.14.2",
        "pg": "^8.13.3",
        "pg-connection-string": "^2.7.0",
        "react-hotkeys-hook": "^4.6.1",
        "semver": "^7.7.1",
        "slickgrid-react": "~5.8.0",
        "uuid": "^11.1.0",
        "vscode-json-languageservice": "^5.4.3",
        "vscode-languageclient": "~6.1.4",
        "vscode-languageserver": "~6.1.1",
        "vscode-languageserver-textdocument": "^1.0.12",
        "vscode-uri": "^3.1.0",
        "zod": "^3.24.2"
    },
    "extensionDependencies": [
        "ms-azuretools.vscode-azureresourcegroups"
    ],
    "contributes": {
        "x-azResources": {
            "azure": {
                "branches": [
                    {
                        "type": "AzureCosmosDb"
                    },
                    {
                        "type": "PostgresqlServersStandard"
                    },
                    {
                        "type": "PostgresqlServersFlexible"
                    },
                    {
                        "type": "MongoClusters"
                    }
                ]
            },
            "workspace": {
                "branches": [
                    {
                        "type": "ms-azuretools.vscode-cosmosdb"
                    }
                ],
                "resources": true
            },
            "commands": [
                {
                    "command": "azureDatabases.createServer",
                    "title": "%cosmosdb.command.account.create%",
                    "type": "microsoft.documentdb/databaseaccounts",
                    "detail": "%cosmosdb.command.account.create.description%"
                }
            ],
            "activation": {
                "onResolve": [
                    "microsoft.documentdb/databaseaccounts",
                    "microsoft.dbforpostgresql/servers",
                    "microsoft.dbforpostgresql/flexibleservers",
                    "microsoft.documentdb/mongoclusters"
                ]
            }
        },
        "languages": [
            {
                "id": "mongo",
                "aliases": [
                    "Mongo Scrapbook",
                    "mongo"
                ],
                "extensions": [
                    ".mongo"
                ],
                "firstLine": "^#!/.*\\bmongo*\\b",
                "configuration": "./grammar/configuration.json"
            },
            {
                "id": "postgres",
                "aliases": [
                    "PostgreSQL"
                ],
                "extensions": [
                    ".psql"
                ]
            },
            {
                "id": "nosql",
                "aliases": [
                    "Cosmos NoSQL",
                    "nosql"
                ],
                "extensions": [
                    ".nosql"
                ]
            }
        ],
        "grammars": [
            {
                "language": "mongo",
                "scopeName": "source.mongo.js",
                "path": "./grammar/JavaScript.tmLanguage.json"
            },
            {
                "scopeName": "source.mongo.js.regexp",
                "path": "./grammar/Regular Expressions (JavaScript).tmLanguage"
            }
        ],
        "commands": [
            {
                "category": "Azure Databases",
                "command": "azureDatabases.createServer",
                "title": "%cosmosdb.command.account.create%",
                "icon": "$(add)"
            },
            {
                "category": "Azure Databases",
                "command": "azureDatabases.refresh",
                "title": "%cosmosdb.command.refresh%",
                "icon": "$(refresh)"
            },
            {
                "category": "Azure Databases",
                "command": "azureDatabases.reportIssue",
                "title": "%cosmosdb.command.issue.report%"
            },
            {
                "category": "Azure Databases",
                "command": "azureDatabases.update",
                "title": "%cosmosdb.command.update%",
                "icon": "$(cloud-upload)"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.newConnection",
                "title": "%cosmosdb.command.connection.add%",
                "icon": "$(plug)"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.removeConnection",
                "title": "%cosmosdb.command.connection.remove%"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.newEmulatorConnection",
                "title": "%cosmosdb.command.connection.emulator.add%"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.copyConnectionString",
                "title": "%cosmosdb.command.connection.copy%"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.deleteAccount",
                "title": "%cosmosdb.command.account.delete%"
            },
            {
                "category": "Cosmos DB",
                "command": "cosmosDB.createDatabase",
                "title": "%cosmosdb.command.database.create%"
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.createGraph",
                "title": "%cosmosdb.command.graph.create%"
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.deleteGraph",
                "title": "%cosmosdb.command.graph.delete%"
            },
            {
                "category": "Graph (Gremlin)",
                "command": "cosmosDB.openGraphExplorer",
                "title": "%cosmosdb.command.graph.explorer%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.createDocDBContainer",
                "title": "%cosmosdb.command.container.create%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.deleteDocDBContainer",
                "title": "%cosmosdb.command.container.delete%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.deleteDatabase",
                "title": "%cosmosdb.command.database.delete%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.createDocDBDocument",
                "title": "%cosmosdb.command.item.create%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.openDocument",
                "title": "%cosmosdb.command.item.open%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.deleteDocDBDocument",
                "title": "%cosmosdb.command.item.delete%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.createDocDBStoredProcedure",
                "title": "%cosmosdb.command.stored_procedure.create%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.openStoredProcedure",
                "title": "%cosmosdb.command.stored_procedure.open%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.executeDocDBStoredProcedure",
                "title": "%cosmosdb.command.stored_procedure.execute%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.deleteDocDBStoredProcedure",
                "title": "%cosmosdb.command.stored_procedure.delete%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.createDocDBTrigger",
                "title": "%cosmosdb.command.trigger.create%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.openTrigger",
                "title": "%cosmosdb.command.trigger.open%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.deleteDocDBTrigger",
                "title": "%cosmosdb.command.trigger.delete%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.viewDocDBContainerOffer",
                "title": "%cosmosdb.command.offer.container.view%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.viewDocDBDatabaseOffer",
                "title": "%cosmosdb.command.offer.database.view%"
            },
            {
                "//": "NoSQL Scrapbook",
                "category": "NoSQL",
                "command": "cosmosDB.writeNoSqlQuery",
                "title": "%cosmosdb.command.query.scrapbook.open%"
            },
            {
                "//": "NoSQL Scrapbook",
                "category": "NoSQL",
                "command": "cosmosDB.connectNoSqlContainer",
                "title": "%cosmosdb.command.query.container.connect%",
                "when": "false"
            },
            {
                "//": "NoSQL Scrapbook",
                "category": "NoSQL",
                "command": "cosmosDB.executeNoSqlQuery",
                "title": "%cosmosdb.command.query.execute%",
                "when": "false"
            },
            {
                "//": "NoSQL Scrapbook",
                "category": "NoSQL",
                "command": "cosmosDB.getNoSqlQueryPlan",
                "title": "%cosmosdb.command.query.plan%",
                "when": "false"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.openNoSqlQueryEditor",
                "title": "%cosmosdb.command.query.editor.open%"
            },
            {
                "category": "NoSQL",
                "command": "cosmosDB.importDocument",
                "title": "%cosmosdb.command.document.import%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.configureFirewall",
                "title": "%cosmosdb.command.postgres.firewall.configure%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.connectDatabase",
                "title": "%cosmosdb.command.postgres.database.connect%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.copyConnectionString",
                "title": "%cosmosdb.command.postgres.connection.copy%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.createDatabase",
                "title": "%cosmosdb.command.postgres.database.create%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.createFunctionQuery",
                "title": "%cosmosdb.command.postgres.function.create%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.createStoredProcedureQuery",
                "title": "%cosmosdb.command.postgres.stored_procedure.create%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteDatabase",
                "title": "%cosmosdb.command.postgres.database.delete%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteFunction",
                "title": "%cosmosdb.command.postgres.function.delete%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteServer",
                "title": "%cosmosdb.command.postgres.account.delete%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.detachServer",
                "title": "%cosmosdb.command.postgres.account.detach%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteStoredProcedure",
                "title": "%cosmosdb.command.postgres.stored_procedure.delete%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.deleteTable",
                "title": "%cosmosdb.command.postgres.table.delete%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.enterCredentials",
                "title": "%cosmosdb.command.postgres.credentials.enter%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.executeQuery",
                "title": "%cosmosdb.command.postgres.query.execute%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.openFunction",
                "title": "%cosmosdb.command.postgres.function.open%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.openStoredProcedure",
                "title": "%cosmosdb.command.postgres.stored_procedure.open%"
            },
            {
                "category": "PostgreSQL",
                "command": "postgreSQL.showPasswordlessWiki",
                "title": "%cosmosdb.command.postgres.passwordless.wiki%",
                "icon": "$(warning)"
            },
            {
                "//": "Mongo DB|Cluster Scrapbook Connect Database",
                "category": "MongoDB Clusters",
                "command": "cosmosDB.connectMongoDB",
                "title": "%cosmosdb.command.mongo.database.connect%"
            },
            {
                "//": "Mongo DB|Cluster Scrapbook Execute All Commands",
                "category": "MongoDB Clusters",
                "command": "cosmosDB.executeAllMongoCommands",
                "title": "%cosmosdb.command.mongo.scrapbook.execute_all%"
            },
            {
                "//": "Mongo DB|Cluster Scrapbook Execute Command",
                "category": "MongoDB Clusters",
                "command": "cosmosDB.executeMongoCommand",
                "title": "%cosmosdb.command.mongo.scrapbook.execute%"
            },
            {
                "//": "Mongo DB|Cluster Scrapbook New Scrapbook",
                "category": "MongoDB Clusters",
                "command": "cosmosDB.newMongoScrapbook",
                "title": "%cosmosdb.command.mongo.scrapbook.new%",
                "icon": "$(new-file)"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.dropCollection",
                "title": "%cosmosdb.command.mongo.collection.delete%"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.dropDatabase",
                "title": "%cosmosdb.command.mongo.database.delete%"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.createCollection",
                "title": "%cosmosdb.command.mongo.collection.create%"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.importDocuments",
                "title": "%cosmosdb.command.mongo.document.import%"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.exportDocuments",
                "title": "%cosmosdb.command.mongo.document.export%"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.createDocument",
                "title": "%cosmosdb.command.mongo.document.create%"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.launchShell",
                "title": "%cosmosdb.command.mongo.shell.launch%"
            },
            {
                "category": "MongoDB Clusters",
                "command": "command.mongoClusters.containerView.open",
                "title": "%cosmosdb.command.mongo.collection.open%"
            }
        ],
        "submenus": [
            {
                "id": "azureDatabases.submenus.workspaceActions",
                "label": "Azure Databases",
                "icon": {
                    "dark": "resources/databases.png",
                    "light": "resources/databases.png"
                }
            },
            {
                "id": "azureDatabases.submenus.mongo.database.scrapbook",
                "label": "Mongo Scrapbook"
            },
            {
                "id": "azureDatabases.submenus.mongo.collection.scrapbook",
                "label": "Mongo Scrapbook"
            }
        ],
        "menus": {
            "azureDatabases.submenus.workspaceActions": [
                {
                    "command": "cosmosDB.newConnection",
                    "group": "1_newConnection@1"
                }
            ],
            "azureDatabases.submenus.mongo.database.scrapbook": [
                {
                    "//": "[Database] Mongo DB|Cluster Scrapbook New",
                    "command": "cosmosDB.newMongoScrapbook",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Database] Mongo DB|Cluster Scrapbook Connect",
                    "command": "cosmosDB.connectMongoDB",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@2"
                }
            ],
            "azureDatabases.submenus.mongo.collection.scrapbook": [
                {
                    "//": "[Collection] Mongo DB|Cluster Scrapbook New",
                    "command": "cosmosDB.newMongoScrapbook",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Collection] Mongo DB|Cluster Scrapbook Connect",
                    "command": "cosmosDB.connectMongoDB",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@2"
                }
            ],
            "view/title": [
                {
                    "submenu": "azureDatabases.submenus.workspaceActions",
                    "when": "view == azureWorkspace",
                    "group": "navigation@6"
                }
            ],
            "editor/context": [
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename==cosmos-result.json"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-document[.]json)/"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-collection[.]json)/"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-stored-procedure[.]js)/"
                },
                {
                    "command": "cosmosDB.executeAllMongoCommands",
                    "when": "resourceLangId==mongo"
                },
                {
                    "command": "cosmosDB.executeMongoCommand",
                    "when": "resourceLangId==mongo"
                },
                {
                    "command": "cosmosDB.importDocument",
                    "when": "resourceLangId==json"
                },
                {
                    "command": "postgreSQL.connectDatabase",
                    "when": "resourceLangId==postgres"
                }
            ],
            "editor/title": [
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename==cosmos-result.json",
                    "group": "navigation"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-document[.]json)(?![a-z])/i",
                    "group": "navigation"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-collection[.]json)(?![a-z])/i",
                    "group": "navigation"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "resourceFilename=~/(.*cosmos-stored-procedure[.]js)(?![a-z])/i",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "azureDatabases.createServer",
                    "when": "view == azureResourceGroups && viewItem =~ /(AzureCosmosDb|PostgreSqlServers(Standard|Flexible))/i && viewItem =~ /azureResourceTypeGroup/i",
                    "group": "1@1"
                },
                {
                    "//": "[Account] (Postgres) Create Database",
                    "command": "postgreSQL.createDatabase",
                    "when": "view =~ /(azureResourceGroups|Workspace|azureFocusView)/ && viewItem =~ /postgresServer(?=[a-z])/i",
                    "group": "1@1"
                },
                {
                    "//": "[Account] (Postgres) Delete Account",
                    "command": "postgreSQL.deleteServer",
                    "when": "view =~ /azure(ResourceGroups|FocusView)/ && viewItem =~ /postgresServer(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "//": "[Account] (Postgres) Detached Account",
                    "command": "postgreSQL.detachServer",
                    "when": "view =~ /azureWorkspace/ && viewItem == postgresServerAttached",
                    "group": "1@2"
                },
                {
                    "//": "[Account] (Postgres) Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azureWorkspace/ && viewItem == postgresServerAttached",
                    "group": "2@1"
                },
                {
                    "//": "[Database] (Postgres) Connect to Database",
                    "command": "postgreSQL.connectDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "1@1"
                },
                {
                    "//": "[Database] (Postgres) Password warning",
                    "command": "postgreSQL.showPasswordlessWiki",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i && viewItem =~ /usesPassword/i",
                    "group": "inline"
                },
                {
                    "//": "[Database] (Postgres) Delete Database",
                    "command": "postgreSQL.deleteDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "1@2"
                },
                {
                    "//": "[Database] (Postgres) Copy connection string",
                    "command": "postgreSQL.copyConnectionString",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "2@1"
                },
                {
                    "//": "[Database] (Postgres) Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i",
                    "group": "3@1"
                },
                {
                    "//": "[Table] (Postgres) Refresh (?)",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresTables",
                    "group": "1@1"
                },
                {
                    "//": "[Table] (Postgres) Delete Table",
                    "command": "postgreSQL.deleteTable",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresTable",
                    "group": "1@2"
                },
                {
                    "//": "[Functions] (Postgres) Create Function",
                    "command": "postgreSQL.createFunctionQuery",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunctions",
                    "group": "1@1"
                },
                {
                    "//": "[Functions] (Postgres) Delete Function",
                    "command": "postgreSQL.deleteFunction",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunction",
                    "group": "1@2"
                },
                {
                    "//": "[Functions] (Postgres) Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunctions",
                    "group": "2@1"
                },
                {
                    "//": "[Stored Procedure] (Postgres) Create Stored Procedure",
                    "command": "postgreSQL.createStoredProcedureQuery",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedures",
                    "group": "1@1"
                },
                {
                    "//": "[Stored Procedure] (Postgres) Delete Stored Procedure",
                    "command": "postgreSQL.deleteStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedure",
                    "group": "1@2"
                },
                {
                    "//": "[Stored Procedure] (Postgres) Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedures",
                    "group": "2@1"
                },
                {
                    "//": "[Account] Create account database",
                    "command": "cosmosDB.createDatabase",
                    "when": "view =~ /azure(ResourceGroups|FocusView|Workspace)/ && viewItem =~ /treeitem[.](mongoCluster|account)(?![a-z.\\/])/i",
                    "group": "1@1"
                },
                {
                    "//": "[Account] Delete account",
                    "command": "cosmosDB.deleteAccount",
                    "when": "view =~ /azure(ResourceGroups|FocusView)/ && viewItem =~ /treeitem[.](mongoCluster|account)(?![a-z.\\/])/i",
                    "group": "1@2"
                },
                {
                    "//": "[Account] Detach account (workspace only)",
                    "command": "cosmosDB.removeConnection",
                    "when": "view =~ /azureWorkspace/ && viewItem =~ /treeitem[.](mongoCluster|account)(?![a-z.\\/])/i",
                    "group": "1@2"
                },
                {
                    "//": "[Account] CosmosDB | MongoDB | Cluster Copy connection string",
                    "command": "cosmosDB.copyConnectionString",
                    "when": "view =~ /azure(ResourceGroups|FocusView|Workspace)/ && viewItem =~ /treeitem[.](mongoCluster|account)(?![a-z.\\/])/i",
                    "group": "2@1"
                },
                {
                    "//": "[Account] Mongo DB|Cluster Launch Shell",
                    "command": "command.mongoClusters.launchShell",
                    "when": "view =~ /azure(ResourceGroups|FocusView|Workspace)/ && viewItem =~ /treeitem[.]mongoCluster(?![a-z.\\/])/i",
                    "group": "2@2"
                },
                {
                    "//": "[Account] Refresh (workspace only)",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azureWorkspace/ && viewItem =~ /treeitem[.](mongoCluster|account)(?![a-z.\\/])/i",
                    "group": "3@1"
                },
                {
                    "//": "[Database] Create Graph container",
                    "command": "cosmosDB.createGraph",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](graph)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Database] Create NoSql container",
                    "command": "cosmosDB.createDocDBContainer",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Database] Mongo DB|Cluster Create collection",
                    "command": "command.mongoClusters.createCollection",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Database] Delete database",
                    "command": "cosmosDB.deleteDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](table|cassandra|core|graph)/i",
                    "group": "1@2"
                },
                {
                    "//": "[Database] Mongo DB|Cluster Delete database",
                    "command": "command.mongoClusters.dropDatabase",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@2"
                },
                {
                    "//": "[Database] View NoSql database offer",
                    "command": "cosmosDB.viewDocDBDatabaseOffer",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](table|cassandra|core)/i",
                    "group": "1@3"
                },
                {
                    "//": "[Database] Mongo DB|Cluster Launch Shell",
                    "command": "command.mongoClusters.launchShell",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "2@1"
                },
                {
                    "//": "[Database] Mongo DB|Cluster Scrapbook Submenu",
                    "submenu": "azureDatabases.submenus.mongo.database.scrapbook",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "2@2"
                },
                {
                    "//": "[Database] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]database(?![a-z.\\/])/i",
                    "group": "3@1"
                },
                {
                    "//": "[Container] Open NoSql query editor",
                    "command": "cosmosDB.openNoSqlQueryEditor",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]container(?![a-z.\\/])/i && viewItem =~ /experience[.](table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Container] Import NoSql documents",
                    "command": "cosmosDB.importDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]container(?![a-z.\\/])/i && viewItem =~ /experience[.](table|cassandra|core)/i",
                    "group": "1@2"
                },
                {
                    "//": "[Container] Delete Graph container",
                    "command": "cosmosDB.deleteGraph",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]container(?![a-z.\\/])/i && viewItem =~ /experience[.](graph)/i",
                    "group": "1@2"
                },
                {
                    "//": "[Container] Delete NoSql container",
                    "command": "cosmosDB.deleteDocDBContainer",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]container(?![a-z.\\/])/i && viewItem =~ /experience[.](table|cassandra|core)/i",
                    "group": "1@3"
                },
                {
                    "//": "[Container] View NoSql container offer",
                    "command": "cosmosDB.viewDocDBContainerOffer",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]container(?![a-z.\\/])/i && viewItem =~ /experience[.](table|cassandra|core)/i",
                    "group": "1@4"
                },
                {
                    "//": "[Container] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]container(?![a-z.\\/])/i",
                    "group": "2@1"
                },
                {
                    "//": "[Collection] Mongo DB|Cluster Open collection",
                    "command": "command.mongoClusters.containerView.open",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Collection] Mongo DB|Cluster Create document",
                    "command": "command.mongoClusters.createDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@2"
                },
                {
                    "//": "[Collection] Import Mongo DB|Cluster documents",
                    "command": "command.mongoClusters.importDocuments",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "2@1"
                },
                {
                    "//": "[Collection] Mongo DB|Cluster Export documents",
                    "command": "command.mongoClusters.exportDocuments",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "2@2"
                },
                {
                    "//": "[Collection] Mongo DB|Cluster Drop collection",
                    "command": "command.mongoClusters.dropCollection",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "3@1"
                },
                {
                    "//": "[Collection] Mongo DB|Cluster Launch shell",
                    "command": "command.mongoClusters.launchShell",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "4@1"
                },
                {
                    "//": "[Collection] Mongo DB|Cluster Scrapbook Submenu",
                    "submenu": "azureDatabases.submenus.mongo.collection.scrapbook",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "4@2"
                },
                {
                    "//": "[Collection] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]collection(?![a-z.\\/])/i",
                    "group": "5@1"
                },
                {
                    "//": "[Collection/Documents] Mongo DB|Cluster Open collection",
                    "command": "command.mongoClusters.containerView.open",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]documents(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Stored Procedures] Create Stored Procedure",
                    "command": "cosmosDB.createDocDBStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]storedProcedures(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Stored Procedures] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]storedProcedures(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "2@1"
                },
                {
                    "//": "[Stored Procedure] Execute",
                    "command": "cosmosDB.executeDocDBStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]storedProcedure(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Stored Procedure] Delete",
                    "command": "cosmosDB.deleteDocDBStoredProcedure",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]storedProcedure(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@2"
                },
                {
                    "//": "[Triggers] Create Trigger",
                    "command": "cosmosDB.createDocDBTrigger",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]triggers(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Triggers] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]triggers(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "2@1"
                },
                {
                    "//": "[Trigger] Delete",
                    "command": "cosmosDB.deleteDocDBTrigger",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]trigger(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Documents] Open NoSql query editor",
                    "command": "cosmosDB.openNoSqlQueryEditor",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]documents(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Documents] Create NoSql Document",
                    "command": "cosmosDB.createDocDBDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]documents(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@2"
                },
                {
                    "//": "[Documents] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]documents(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "2@1"
                },
                {
                    "//": "[Document] Delete",
                    "command": "cosmosDB.deleteDocDBDocument",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]document(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Document] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]document(?![a-z.\\/])/i && viewItem =~ /experience[.](graph|table|cassandra|core)/i",
                    "group": "2@1"
                },
                {
                    "//": "[Indexes] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]indexes(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@1"
                },
                {
                    "//": "[Index] Refresh",
                    "command": "azureDatabases.refresh",
                    "when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /treeitem[.]index(?![a-z.\\/])/i && viewItem =~ /experience[.](mongocluster|mongodb)/i",
                    "group": "1@1"
                }
            ],
            "explorer/context": [
                {
                    "command": "cosmosDB.importDocument",
                    "when": "resourceLangId == json"
                },
                {
                    "command": "postgreSQL.connectDatabase",
                    "when": "resourceLangId == postgres"
                }
            ],
            "commandPalette": [
                {
                    "command": "azureDatabases.refresh",
                    "when": "never"
                },
                {
                    "command": "azureDatabases.update",
                    "when": "never"
                },
                {
                    "command": "cosmosDB.executeAllMongoCommands",
                    "when": "editorLangId == 'mongo'"
                },
                {
                    "command": "cosmosDB.executeMongoCommand",
                    "when": "editorLangId == 'mongo'"
                },
                {
                    "command": "cosmosDB.executeNoSqlQuery",
                    "when": "editorLangId == 'nosql'"
                },
                {
                    "command": "cosmosDB.getNoSqlQueryPlan",
                    "when": "editorLangId == 'nosql'"
                },
                {
                    "command": "postgreSQL.executeQuery",
                    "when": "editorLangId == 'postgres'"
                }
            ]
        },
        "keybindings": [
            {
                "command": "cosmosDB.executeMongoCommand",
                "key": "ctrl+shift+'",
                "mac": "cmd+shift+'",
                "when": "editorLangId == 'mongo' && editorTextFocus"
            },
            {
                "command": "cosmosDB.executeAllMongoCommands",
                "key": "ctrl+shift+;",
                "mac": "cmd+shift+;",
                "when": "editorLangId == 'mongo' && editorTextFocus"
            }
        ],
        "configuration": {
            "title": "Azure Databases",
            "properties": {
                "mongo.shell.path": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "%cosmosdb.configuration.mongo.shell.path%",
                    "default": null
                },
                "mongo.shell.args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "%cosmosdb.configuration.mongo.shell.args%",
                    "default": [
                        "--quiet"
                    ]
                },
                "mongo.shell.timeout": {
                    "type": "number",
                    "description": "%cosmosdb.configuration.mongo.shell.timeout%",
                    "default": 30
                },
                "azureDatabases.batchSize": {
                    "type": "number",
                    "description": "%cosmosdb.configuration.batch.size%",
                    "default": 50
                },
                "azureDatabases.useCosmosOAuth": {
                    "type": "boolean",
                    "markdownDescription": "%cosmosdb.configuration.oauth.enable%",
                    "default": false
                },
                "azureDatabases.confirmationStyle": {
                    "type": "string",
                    "description": "%cosmosdb.configuration.confirmation.style%",
                    "enum": [
                        "wordConfirmation",
                        "challengeConfirmation",
                        "buttonConfirmation"
                    ],
                    "enumItemLabels": [
                        "%cosmosdb.configuration.confirmation.style.word%",
                        "%cosmosdb.configuration.confirmation.style.challenge%",
                        "%cosmosdb.configuration.confirmation.style.button%"
                    ],
                    "enumDescriptions": [
                        "%cosmosdb.configuration.confirmation.style.word.description%",
                        "%cosmosdb.configuration.confirmation.style.challenge.description%",
                        "%cosmosdb.configuration.confirmation.style.button.description%"
                    ],
                    "default": "wordConfirmation"
                },
                "azureDatabases.showOperationSummaries": {
                    "type": "boolean",
                    "default": true,
                    "description": "%cosmosdb.configuration.operation.summaries%"
                },
                "cosmosDB.documentLabelFields": {
                    "type": "array",
                    "default": [
                        "name",
                        "Name",
                        "NAME",
                        "ID",
                        "UUID",
                        "Id",
                        "id",
                        "_id",
                        "uuid"
                    ],
                    "description": "%cosmosdb.configuration.document.label.fields%"
                },
                "cosmosDB.emulator.mongoPort": {
                    "type": "integer",
                    "default": 10255,
                    "description": "%cosmosdb.configuration.emulator.mongo.port%"
                },
                "cosmosDB.emulator.port": {
                    "type": "integer",
                    "default": 8081,
                    "description": "%cosmosdb.configuration.emulator.port%"
                },
                "cosmosDB.enableEndpointDiscovery": {
                    "type": "boolean",
                    "default": true,
                    "description": "%cosmosdb.configuration.endpoint.discovery%"
                },
                "cosmosDB.showSavePrompt": {
                    "type": "boolean",
                    "default": true,
                    "description": "%cosmosdb.configuration.save.prompt%"
                }
            }
        }
    }
}
